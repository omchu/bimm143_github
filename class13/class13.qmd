---
title: "Class 13: RNASeq Mini-Project"
author: "Olivia Chu"
format: gfm
---

## Input Data

The data for the hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

> Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703

The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1.

```{r}
library(DESeq2)
```

```{r}
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"
```

```{r}
# Import metadata and take a peak
colData = read.csv("GSE37704_metadata.csv", row.names=1)
head(colData)
```

```{r}
# Import countdata
countDataTmp = read.csv(countFile, row.names=1)
head(countDataTmp)
```

> Q1. Complete the code below to remove the troublesome first column from countData

```{r}
# Note we need to remove the odd first $length col
countData <- as.matrix(countDataTmp[,-1])
head(countData)
```

> Q2. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

Check that my metadata and countData match.

```{r}
rownames(colData) == colnames(countData)
```

```{r}
# Filter countData where you have 0 read count across all samples
to.keep <- rowSums(countData) != 0
countData <- countData[to.keep,]
nrow(countData)
head(countData)
```

# DESeq analysis

```{r}
library(DESeq2)
```

Setup the object that DESeq needs for analysis with the lovely long-winded function:

```{r}
dds = DESeqDataSetFromMatrix(countData=countData,
                             colData=colData,
                             design=~condition)
```

Run the analysis:

```{r}
dds <-DESeq(dds)
res <- results(dds)

res
```

Next, get results for the HoxA1 knockdown versus control siRNA (remember that these were labeled as "hoxa1_kd" and "control_sirna" in our original colData metaFile input to DESeq, you can check this above and by running the `resultsNames(dds)` command).

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```


> Q3. Call the summary() function on your results to get a sense of how many genes are up- or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

# Volcano plot

```{r}
plot( res$log2FoldChange, -log(res$padj) )
```

Make some colors to highlight the subset of genes with significant high fold change values.

> Q4. Improve this plot by completing the below code, which adds color and axis labels.

```{r}
mycols <- rep("gray", nrow(res) )

mycols[ abs(res$log2FoldChange) > 2 ] <- "blue"

mycols[ res$padj > 0.05 ] = "gray"

plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)")

abline(v=c(-2,2), lty=2)
```

# Add gene annotation data

Our pathway analysis downstream will use KEGG pathways, and genes in KEGG pathways are annotated with Entrez gene IDs. Let's add them.

> Q5. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

> Q6. Finally for this section, let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

# Geneset enrichment analysis (pathway analysis)

```{r}
# BiocManager::install( c("pathview", "gage", "gageData") )
library(pathview)
```

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```
The main `gage()` function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

Note that we used the `mapIDs()` function above to obtain Entrez gene IDs and we have the fold change results from DESeq2 analysis.

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Now, let’s run the gage pathway analysis.

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Let's look at the object returned from `gage()`.

```{r}
attributes(keggres)
```

Let's look at the first few down (less) pathway results:

```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```

Now, let's try out the `pathview()` function from the pathview package to make a pathway plot with our RNA-Seq expression results shown in color.

To begin with, let's manually supply a pathway.id (namely the first part of the "hsa04110 Cell cycle") that we could see from the print out above.

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

Let's add this image to my document.

![Pathway Analysis](hsa04110.pathview.png)

Now, let's process our results a bit more to automatically pull out the top 5 upregulated pathways, then further process that just to get the pathway IDs needed by the `pathview()` function. We'll use these KEGG pathway IDs for pathview plotting below.

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

Finally, let's pass these IDs in keggresids to the `pathview()` function to draw plots for all the top 5 pathways.

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04640.pathview.png)

![](hsa04630.pathview.png)

![](hsa04142.pathview.png)

![](hsa00140.pathview.png)

![](hsa04330.pathview.png)

> Q7. Can you do the same procedure as above to plot the pathview figures for the top 5 down-regulated pathways?

```{r}
## Focus on top 5 down-regulated pathways here for demo purposes only
keggrespathwaysL <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresidsL = substr(keggrespathwaysL, start=1, stop=8)
keggresidsL
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresidsL, species="hsa")
```

![](hsa04110.pathview.png)

![](hsa03030.pathview.png)

![](hsa03013.pathview.png)

![](hsa03440.pathview.png)

![](hsa04114.pathview.png)

# Gene Ontology (GO)

Let’s focus on BP (a.k.a Biological Process).

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

# Reactome Analysis

Let's now conduct over-representation enrichment analysis and pathway-topology analysis with Reactome using the previous list of significant genes generated from our differential expression results above.

First, Using R, output the list of significant genes at the 0.05 level as a plain text file:

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

> Q8. What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

The pathway with the most significant "Entities p-value" is Endosomal/Vacuolar pathway. No, not many most significant pathways listed match my previous KEGG results.

```{r}
head(keggres$less)
```