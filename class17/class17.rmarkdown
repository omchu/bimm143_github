---
title: "Class 17: Mini Project"
author: "Olivia Chu (PID 911)"
format: html
---


The goal of this hands-on mini-project is to examine and compare the COVID-19 vaccination rates around San Diego.

We will start by downloading the most recently dated “Statewide COVID-19 Vaccines Administered by ZIP Code” CSV file from: https://data.ca.gov/dataset/covid-19-vaccine-progress-dashboard-data-by-zip-code

# Data Import


```{r}
url <- "https://data.chhs.ca.gov/dataset/ead44d40-fd63-4f9f-950a-3b0111074de8/resource/ec32eece-7474-4488-87f0-6e91cb577458/download/covid19vaccinesbyzipcode_test.csv"

# Import vaccination data
vax <- read.csv(url)

head(vax)
```


> Q1. What column details the total number of people fully vaccinated? 

The column titled "persons_fully_vaccinated," details the total number of people fully vaccinated.


```{r}
# vax$persons_fully_vaccinated
```


> Q2. What column details the Zip code tabulation area? 

The column titled "zip_code_tabulation_area," details the zip code tabulation area.


```{r}
# vax$zip_code_tabulation_area
```


> Q3. What is the earliest date in this dataset? 


```{r}
vax$as_of_date[1]
```


The earliest date in this dataset is 2021-01-05 (01/05/2021).

> Q4. What is the latest date in this dataset? 


```{r}
vax$as_of_date[nrow(vax)]
```


The latest date in this dataset is 2023-02-28 (02/28/2023).

We can use the `skim()` function for a quick overview of this dataset.


```{r}
skimr::skim(vax)
```


> Q5. How many numeric columns are in this dataset? 

There are 13 numeric columns in this dataset.

> Q6. Note that there are “missing values” in the dataset. How many NA values there in the persons_fully_vaccinated column? 


```{r}
sum(is.na(vax$persons_fully_vaccinated))
```


There are 16525 NA values in the persons_fully_vaccinated column.

> Q7. What percent of persons_fully_vaccinated values are missing (to 2 significant figures)? 


```{r}
round( sum(is.na(vax$persons_fully_vaccinated))/nrow(vax) * 100, 2 )
```


8.29% of persons_fully_vaccinated values are missing.

> Q8. [Optional]: Why might this data be missing?

This data could be missing due to privacy reasons, such as people who report to other agencies and not to the state (i.e. government employees, federal employees, military, etc.)

# Working with dates

The lubridate package makes working with dates and times in R much less of a pain. Let's have a first play with this package here.


```{r}
library(lubridate)
```

```{r}
today()
```


We can now magically do math with dates.


```{r}
today() - ymd("2021-01-05")
```


Calculating my age in days for fun:


```{r}
today() - ymd("2000-01-13")
```


Let's treat the whole col.


```{r}
# Specify that we are using the year-month-day format
vax$as_of_date <- ymd(vax$as_of_date)
```


How many days have passed since the first vaccination reported in this dataset?


```{r}
today() - vax$as_of_date[1]
```


> Q9. How many days have passed since the last update of the dataset? 


```{r}
today() - vax$as_of_date[nrow(vax)]
```

7 days have passed since the last update of the dataset.

> Q10. How many unique dates are in the dataset (i.e. how many different dates are detailed)? 


```{r}
length(unique(vax$as_of_date))
```


There are 113 unique dates in this dataset.

# Working with ZIP codes

ZIP codes are also rather annoying things to work with as they are numeric but not in the conventional sense of doing math.

Just like dates we have special packages to help us work with ZIP codes.


```{r}
library(zipcodeR)
```

```{r}
geocode_zip('92037')
```


We ca calculate the distance between the centroids of any two ZIP codes in miles using `zip_distance()`.


```{r}
zip_distance('92037','92126')
```


More usefully, we can pull census data about ZIP code areas (including median household income etc.) using `reverse_zipcode()`. For example:


```{r}
reverse_zipcode(c('92037', "92126") )
```

